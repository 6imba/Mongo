*** mongo ***
# CRUD Database,Collections,Documents in mongodb.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Create:
    1. Create database if not exist               > use DatabaseName
    2. Open and work on active Database if exist  > use DatabaseName
    3. Create a collection                        > db.CollectionName
    4. Create collection with validation rule:    > db.createCollection("myCollectionName", {
                                                        validator:{
                                                            $jsonSchema:{
                                                                bsonType:"object",
                                                                required:["name", "age"],
                                                                properties:{
                                                                    name:{
                                                                    bsonType:"string",
                                                                    description:"Must be string and required."
                                                                    },
                                                                    age:{
                                                                    bsonType:"int",
                                                                    description:"Must be an Integer and required."
                                                                    },
                                                                    graduated:{
                                                                    bsonType:"bool",
                                                                    description:"Must be an booelan."
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    })
    4. Create collection with validation rule One_Line:
        > db.createCollection("myCollectionName", {validator:{$jsonSchema:{bsonType:"object",required:["name", "age"],properties:{name:{bsonType:"string",description:"Must be string and required."},age:{bsonType:"int",description:"Must be an Integer and required."},graduated:{bsonType:"bool",description:"Must be an booelan."}}}}})


# Create or Insert:
    5. Insert one document into a collection          > db.simbaCollection.insertOne({ name: "ReactJS", type: "Front End", status: false, experience: null })
    6. Insert many documents into a collection        > db.simbaCollection.insertMany([{ name: "Php", type: "BackEnd", status: true, experience: 6 }, { name: "Python", type: "BackEnd", status: true, experience: 7 }])
        - insertOne takes one document_object.
        - insertMany takes one array of document_object.
        > insert BSON data with automatic generated id(insertedId) into collection.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Retrive:
  7. See all Databases                  > show dbs
      - show dbs command will show the database name only if that particular database has collection and at least one document inside that collection.
  8. See the active database                                    > db
  9. See the collection in active db                            > show collections
  10. See documents inside the collection of active db           > db.simbaCollection.find()
  11. See one document inside the collection of active db        > db.simbaCollection.findOne()
  12. See documents inside the collection of active db          > db.simbaCollection.find().pretty()
  13. See numbers documents inside the collection of active db  > db.simbaCollection.find().pretty().length()
  14. See length function defination                            > db.simbaCollection.find().pretty().length
  15. See particular document                                   > db.simbaCollection.find({name: "Php"})
      - db.simbaCollection.find(query, projection)
  16. See particular document with particular fields            > db.simbaCollection.find({name: "Php"}, {name:1})
  17. See particular document without particular fields         > db.simbaCollection.find({name: "Php"}, {name:0})
  18. See particular document limit                             > db.simbaCollection.find({status: "true"}).limit(2)
  19. See particular document limit                             > db.simbaCollection.find({status: "true"}).limit(1)
  20. See particular document limit                             > db.simbaCollection.findOne({status: "true"})
  21. skip document                                             > db.simbaCollection.find({status: "true"}).limit(3).skip(2)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Update:
    syntax:
        - db.COLLECTION_NAME.updateOne(<filter>, <update>) => updates the first matched filtered document.
        - db.COLLECTION_NAME.updateMany(<filter>, <update>) => updates the all matched filtered document.

  22. db.simbaCollection.updateOne({name: "Php"}, {$set: {name: "PHP"}})
  23. db.simbaCollection.updateMany({status: true}, {$set: {experience: 1.5}})

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Delete:
  - syntax: db.COLLECTION_NAME.deleteMany(DELETION_CRITERIA)
  21. db.simbaCollection.deleteOne({status: false})   ==> deletes first documents in a collection which meets query filter
  21. db.simbaCollection.deleteMany({status: false})  ==> deletes all documents in a collection which meets query filter
  22. db.simbaCollection.deleteMany({})               ==> deletes all documents in a collection
  23. db.collecttion_name.drop()                      ==> delete collection.
  23. db.dropDatabase()                               ==> delete database.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*** quit(), ctrl+c ***

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# To every CRUD or any operation in MongoDb object of actknowlegement is returned:
    - { "acknowledged" : true, "insertedId" : ObjectId("61e829a085dfb7c7edfd9d15")} ==> when create
    - { "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 2 } ==> when update
    - { "acknowledged" : true, "deletedCount" : 1 } ==> when delete

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Reference: https://docs.mongodb.com/manual/tutorial/remove-documents/


- create database ==>
	$ use databasename: open/activate/switched given database if exist and create and open/activate/switched given database if not exist 
- show list of database==>
	$ show dbs: only databases who atleast has one document in any collection.
- create collection ==>
	# Syntax: > db.collection_name.insertOne(bson_document)
	# Example: > db.user.insertOne({name:"Amir Shrestha",faculty:"BIT",age:22,male:true})
	# Note:
		- here db means active database.
		- respose: { "acknowledged" : true, "insertedId": ObjectId("234nnlhjh45j233")}
		- automatic id generated(acts as pk in relational database).
- show active database ==>
	$ db
- show collections inside active database ==>
	$ show collections
- show documents inside collection ==>
	$ db.collection_name_1.find()
	$ db.collection_name_2.find()
	$ db.collection_name.find().pretty()

- insert document in collection:
	> db.collection_name.insertOne(bson_document)
	# bson_document ==> {field_1: value, field_2: value, field_1: value}
	
	> db.collection_name.insertMany(array_of_multiple_bson_document)
	# array_of_multiple_bson_document ==> [{field_1: value, field_2: value},{field_1: value},{field_1: value, field_2: value, field_1: value}]
	
	# Note:
		- respose: { "acknowledged" : true, "insertedId": ObjectId("234nnlhjh45j233"),ObjectId("234nnlhjh45j233"),ObjectId("234nnlhjh45j233")}
		
- read documents in collection:
	# syntax: db.collection_name.find(query,projection)
	# query:
	# projection:

	> db.collection_name_1.find()
	> db.collection_name_1.find({name:"Amir"}) //case-sensative
	> db.collection_name_1.find({name:"Amir"}, {name:1,course:1})
	> db.collection_name_1.find({name:"Amir"}, {name:0,course:0})
	> db.collection_name_1.find({name:"Amir"}, {_id:0,name:1,course:1})
	> db.collection_name_1.findOne({gender:"male"})
	> db.collection_name_1.find({gender:"male"}).limit(1)
	> db.collection_name_1.find({gender:"male"}).limit(2)
	> db.collection_name_1.find({gender:"male"}).limit(1).skip(1)
	> db.collection_name_1.find({gender:"male"}).limit(1).skip(2)

- update document in collection:
	# Syntax: db.collection_name_1.updateOne(<filter>,<update_value>)
	> db.collection_name_1.updateOne({name:"Amir"}, {$set: {age: 23, voice: "deep"} })
	> db.collection_name_1.updateMany({role:"developer"}, {$set: {salary: 100000} })
	> db.collection_name_1.updateMany({role:"developer"}, {$set: {salary:salary + 25%} })

- delete document in collection:
	# db.collection_name_1.deleteMany(<critteria>)
	> db.collection_name_1.deleteMany({age: 18})
	> db.collection_name_1.deleteMany() #delete all document
	> db.collection_name_1.remomve({age: 18}) #deprecated

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Summary:
# Create:
    - db.Collection1.insertOne({name: "Amir", age: 22})
    - db.Collection1.insertMany([{name: "Amir", age: 22}, {name: "Sital Being", age: 21}])
# Retrive:
    - db.Collection1.find()
    - db.Collection1.findOne({age: 22})
    - db.Collection1.findOne({name: "Amir"})
# Update:
    - db.Collection1.updateOne({name: "Amir"}, {$set: {age: 22}})
    - db.Collection1.updateMany({age: 22}, {$set: {role: "Moderator"}})
    - db.Collection1.findByIdAndUpdate({age: 22}, {$set: {role: "Moderator"}})
# Delete:
    - db.simbaCollection.deleteOne({status: false})
    - db.simbaCollection.deleteMany({status: false})
    - db.simbaCollection.deleteMany({})

- updateOne: return actknowledgement
- findByIdAndUpdate: returns updated object
